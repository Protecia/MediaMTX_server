name: CI - Build, Push and Deploy Docker Image

on:
  push:
    branches: ["main" ]
  pull_request:
    branches: ["main"]
    types: [opened, synchronize, reopened]
  release:
    types: [published]

jobs:
  prepare:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - uses: scaleway/action-scw-secret@v0
        with:
          secret-names: |
            /mediamtx/mtx-github
          access-key: ${{ secrets.SCW_ACCESS_KEY }}
          secret-key: ${{ secrets.SCW_SECRET_KEY }}
          default-project-id: ${{ secrets.SCW_DEFAULT_PROJECT_ID }}
          default-organization-id: ${{ secrets.SCW_DEFAULT_ORGANIZATION_ID }}
      - name: Set secrets variables
        run: |
          MTX_ADMIN_PASS_RE7=$(echo "$MTX_GITHUB" | jq -r '.MTX_ADMIN_PASS_RE7')
          DOCKER_HUB_USER=$(echo "$MTX_GITHUB" | jq -r '.DOCKER_HUB_USER')
          DOCKER_HUB_TOKEN=$(echo "$MTX_GITHUB" | jq -r '.DOCKER_HUB_TOKEN')
          echo "MTX_ADMIN_PASS_RE7=$MTX_ADMIN_PASS_RE7" > secret.env
          echo "DOCKER_HUB_USER=$DOCKER_HUB_USER" >> secret.env
          echo "DOCKER_HUB_TOKEN=$DOCKER_HUB_TOKEN" >> secret.env
      - name: Set variables for push
        if: github.event_name == 'push'
        run: |
          echo "DEPLOY_ENV=re7" > version.env
          echo "IMAGE_TAG=${{ github.sha }}" >> version.env
      - name: Set variables for pull request
        if: github.event_name == 'pull_request'
        run: |
          echo "DEPLOY_ENV=re7" > version.env
          echo "IMAGE_TAG=${{ github.sha }}" >> version.env
      - name: Set variables for release
        if: github.event_name == 'release'
        run: |
          echo "DEPLOY_ENV=prod" > version.env
          echo "IMAGE_TAG=${{ github.event.release.tag_name }}" >> version.env
      - name: Upload code as artifact
        uses: actions/upload-artifact@v4
        with:
          name: code
          path: .

  build-and-push:
    runs-on: ubuntu-latest
    needs: prepare
    steps:
      - name: Download code artifact
        uses: actions/download-artifact@v4
        with:
          name: code
          path: .
      - name: Set IMAGE_TAG from version.env
        id: set-image-tag
        run: |
          source version.env
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
      - name: Set secrets from secret.env
        id: set-secrets
        run: |
          source secret.env
          echo "::add-mask::$DOCKER_HUB_USER"
          echo "::add-mask::$DOCKER_HUB_TOKEN"
          echo "DOCKER_HUB_USER=$DOCKER_HUB_USER" >> $GITHUB_ENV
          echo "DOCKER_HUB_TOKEN=$DOCKER_HUB_TOKEN" >> $GITHUB_ENV
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKER_HUB_USER }}
          password: ${{ env.DOCKER_HUB_TOKEN }}
      - name: Build Docker image
        run: docker build -f deploy/Dockerfile -t roboticia/mediamtx:${{ env.IMAGE_TAG }} .
      - name: Push Docker image
        run: docker push roboticia/mediamtx:${{ env.IMAGE_TAG }}

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Download code artifact
        uses: actions/download-artifact@v4
        with:
          name: code
          path: .

      - name: Set version file
        id: version-file
        run: |
          source version.env
          echo "VERSION_FILE=version_${DEPLOY_ENV}.env" >> $GITHUB_ENV
          echo "SECRET_FILE=secret_${DEPLOY_ENV}.env" >> $GITHUB_ENV

      - name: Set secrets from secret.env
        id: set-secrets
        run: |
          source secret.env
          echo "::add-mask::$SSH_MTX_HOST"
          echo "::add-mask::$SSH_MTX_USER"
          echo "::add-mask::$SSH_MTX_KEY"
          echo "::add-mask::$SSH_MTX_PORT"
          echo "SSH_MTX_HOST=$SSH_MTX_HOST" >> $GITHUB_ENV
          echo "SSH_MTX_USER=$SSH_MTX_USER" >> $GITHUB_ENV
          echo "SSH_MTX_USER=$SSH_MTX_KEY" >> $GITHUB_ENV
          echo "SSH_MTX_USER=$SSH_MTX_PORT" >> $GITHUB_ENV
      - name: Display variables
        run: |
          cat version.env
          echo "${{ env.VERSION_FILE }}"
          mv version.env ${{ env.VERSION_FILE }}
          mv secret.env ${{ env.SECRET_FILE }}

      - name: Copy files to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ env.SSH_MTX_HOST }}
          username: ${{ env.SSH_MTX_USER }}
          key: ${{ env.SSH_MTX_KEY }}
          source: >
            ./deploy/docker-compose-re7.yaml,
            ./${{ env.VERSION_FILE }},
            ./${{ env.SECRET_FILE }},
            ./deploy/start_remote.sh,
            ./deploy/mediamtx.yaml
          target: /home/mediamtx/
          recursive: true
          port: ${{ env.SSH_MTX_PORT }}
          overwrite: true

      - name: Start docker compose
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ env.SSH_MTX_HOST }}
          username: ${{ env.SSH_MTX_USER }}
          key: ${{ env.SSH_MTX_KEY }}
          port: ${{ env.SSH_MTX_PORT }}
          script: |
            source ${{ env.VERSION_FILE }}
            cat ${{ env.SECRET_FILE }} ${{ env.VERSION_FILE }} > combined-$DEPLOY_ENV.env
            cd deploy
#            bash start_remote.sh $DEPLOY_ENV